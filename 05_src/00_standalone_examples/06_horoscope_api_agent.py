
# Source: [OpenAI Documentation](https://platform.openai.com/docs/guides/function-calling)

from openai import OpenAI
from dotenv import load_dotenv
import json
import requests

load_dotenv('.secrets')

client = OpenAI()

tools = [
    {
        "type": "function",
        "name": "get_horoscope",
        "description": "Get today's horoscope for an astrological sign.",
        "parameters": {
            "type": "object",
            "properties": {
                "sign": {
                    "type": "string",
                    "description": "An astrological sign like Taurus or Aquarius",
                },
                "day": {
                    "type": "string",
                    "description": 'The day to get the horoscope for. Can be "TODAY", "TOMORROW", "YESTERDAY" or a date in format (YYYY-MM-DD). Defaults to "TODAY".',
                    "default": "TODAY",
                }
            },
            "required": ["sign"],
        },
    },
]


    
def get_horoscope(sign, day="TODAY"):
    """
    An API call to a horoscope service is made.
    The API call is to https://horoscope-app-api.vercel.app/api/v1/get-horoscope/daily
    and takes two parameters sign and day.
    Accepted values for sign are: Aries, Taurus, Gemini, Cancer, Leo, Virgo, Libra, Scorpio, Sagittarius, Capricorn, Aquarius, Pisces
    Accepted values for day are: Date in format (YYYY-MM-DD) OR "TODAY" OR "TOMORROW" OR "YESTERDAY".
    """
    
    response = get_horoscope_from_service(sign, day)
    horoscope = get_horoscope_from_response(sign, response)
    return horoscope



def get_horoscope_from_service(sign, day):
    url = "https://horoscope-app-api.vercel.app/api/v1/get-horoscope/daily"
    params = {
        "sign": sign.capitalize(),
        "day": day.upper()
    }
    response = requests.get(url, params=params)
    return response

def get_horoscope_from_response(sign, response):
    resp_dict = json.loads(response.text)
    data = resp_dict.get("data")
    horoscope_data = data.get("horoscope_data", "No horoscope found.")
    date = data.get("date", "No date found.")
    horoscope = f"Horoscope for {sign.capitalize()} on {date}: {horoscope_data}"
    return horoscope


input_list = [
    {"role": "user", "content": "What is the horoscope for Sagittarius?"}
]

response = client.responses.create(
    model="gpt-5", 
    tools = tools,
    input=input_list
)

input_list += response.output

for item in response.output:
    if item.type == "function_call":
        if item.name == "get_horoscope":
            args = json.loads(item.arguments)
            horoscope = get_horoscope(**args)

            input_list.append({
                "type": "function_call_output",
                "call_id": item.call_id,
                "output": json.dumps({
                    "horoscope": horoscope
                })
            })

print("Final input:")
print(input_list)

response = client.responses.create(
    model="gpt-5", 
    instructions="Respond only with a horoscope generated by a tool.",
    tools = tools,
    input=input_list
)

print("Final output:")
print(response.model_dump_json(indent=2))
print("\n" + response.output_text)